// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	connector "github.com/connctd/connector-go"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	restapi "github.com/connctd/restapi-go"

	time "time"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateThing provides a mock function with given fields: ctx, token, thing
func (_m *Client) CreateThing(ctx context.Context, token connector.InstantiationToken, thing restapi.Thing) (restapi.Thing, error) {
	ret := _m.Called(ctx, token, thing)

	var r0 restapi.Thing
	if rf, ok := ret.Get(0).(func(context.Context, connector.InstantiationToken, restapi.Thing) restapi.Thing); ok {
		r0 = rf(ctx, token, thing)
	} else {
		r0 = ret.Get(0).(restapi.Thing)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, connector.InstantiationToken, restapi.Thing) error); ok {
		r1 = rf(ctx, token, thing)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThing provides a mock function with given fields: ctx, token, thingID
func (_m *Client) DeleteThing(ctx context.Context, token connector.InstantiationToken, thingID string) error {
	ret := _m.Called(ctx, token, thingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, connector.InstantiationToken, string) error); ok {
		r0 = rf(ctx, token, thingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateActionStatus provides a mock function with given fields: ctx, token, actionRequestID, status, err
func (_m *Client) UpdateActionStatus(ctx context.Context, token connector.InstantiationToken, actionRequestID string, status restapi.ActionRequestStatus, err string) error {
	ret := _m.Called(ctx, token, actionRequestID, status, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, connector.InstantiationToken, string, restapi.ActionRequestStatus, string) error); ok {
		r0 = rf(ctx, token, actionRequestID, status, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInstallationState provides a mock function with given fields: ctx, token, state, details
func (_m *Client) UpdateInstallationState(ctx context.Context, token connector.InstallationToken, state connector.InstallationState, details json.RawMessage) error {
	ret := _m.Called(ctx, token, state, details)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, connector.InstallationToken, connector.InstallationState, json.RawMessage) error); ok {
		r0 = rf(ctx, token, state, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInstanceState provides a mock function with given fields: ctx, token, state, details
func (_m *Client) UpdateInstanceState(ctx context.Context, token connector.InstantiationToken, state connector.InstantiationState, details json.RawMessage) error {
	ret := _m.Called(ctx, token, state, details)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, connector.InstantiationToken, connector.InstantiationState, json.RawMessage) error); ok {
		r0 = rf(ctx, token, state, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateThingPropertyValue provides a mock function with given fields: ctx, token, thingID, componentID, propertyID, value, lastUpdate
func (_m *Client) UpdateThingPropertyValue(ctx context.Context, token connector.InstantiationToken, thingID string, componentID string, propertyID string, value string, lastUpdate time.Time) error {
	ret := _m.Called(ctx, token, thingID, componentID, propertyID, value, lastUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, connector.InstantiationToken, string, string, string, string, time.Time) error); ok {
		r0 = rf(ctx, token, thingID, componentID, propertyID, value, lastUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateThingStatus provides a mock function with given fields: ctx, token, thingID, status
func (_m *Client) UpdateThingStatus(ctx context.Context, token connector.InstantiationToken, thingID string, status restapi.StatusType) error {
	ret := _m.Called(ctx, token, thingID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, connector.InstantiationToken, string, restapi.StatusType) error); ok {
		r0 = rf(ctx, token, thingID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
