// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package lorawan

import (
	connector "github.com/connctd/connector-go"
	mock "github.com/stretchr/testify/mock"
)

// mockDataStore is an autogenerated mock type for the dataStore type
type mockDataStore struct {
	mock.Mock
}

// DecoderNameForApp provides a mock function with given fields: instanceID, appId
func (_m *mockDataStore) DecoderNameForApp(instanceID string, appId uint64) (string, error) {
	ret := _m.Called(instanceID, appId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, uint64) string); ok {
		r0 = rf(instanceID, appId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(instanceID, appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallationToken provides a mock function with given fields: installationId
func (_m *mockDataStore) GetInstallationToken(installationId string) (connector.InstallationToken, error) {
	ret := _m.Called(installationId)

	var r0 connector.InstallationToken
	if rf, ok := ret.Get(0).(func(string) connector.InstallationToken); ok {
		r0 = rf(installationId)
	} else {
		r0 = ret.Get(0).(connector.InstallationToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(installationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: instanceId
func (_m *mockDataStore) GetInstance(instanceId string) (connector.InstantiationRequest, error) {
	ret := _m.Called(instanceId)

	var r0 connector.InstantiationRequest
	if rf, ok := ret.Get(0).(func(string) connector.InstantiationRequest); ok {
		r0 = rf(instanceId)
	} else {
		r0 = ret.Get(0).(connector.InstantiationRequest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: thingID, key
func (_m *mockDataStore) GetState(thingID string, key string) ([]byte, error) {
	ret := _m.Called(thingID, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(thingID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(thingID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MapDevEUIToThingID provides a mock function with given fields: instanceID, devEUI
func (_m *mockDataStore) MapDevEUIToThingID(instanceID string, devEUI []byte) (string, error) {
	ret := _m.Called(instanceID, devEUI)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []byte) string); ok {
		r0 = rf(instanceID, devEUI)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(instanceID, devEUI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetState provides a mock function with given fields: thingId, key, value
func (_m *mockDataStore) SetState(thingId string, key string, value []byte) error {
	ret := _m.Called(thingId, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(thingId, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreDEVUIToThingID provides a mock function with given fields: instanceID, devEUI, thingID
func (_m *mockDataStore) StoreDEVUIToThingID(instanceID string, devEUI []byte, thingID string) error {
	ret := _m.Called(instanceID, devEUI, thingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, string) error); ok {
		r0 = rf(instanceID, devEUI, thingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
